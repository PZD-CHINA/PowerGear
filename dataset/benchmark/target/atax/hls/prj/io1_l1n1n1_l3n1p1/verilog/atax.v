// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="atax,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.419200,HLS_SYN_LAT=41420,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=5,HLS_SYN_FF=781,HLS_SYN_LUT=1073,HLS_VERSION=2018_2}" *)

module atax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        x_address0,
        x_ce0,
        x_q0,
        y_out_din,
        y_out_full_n,
        y_out_write
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_pp0_stage0 = 18'd8;
parameter    ap_ST_fsm_state6 = 18'd16;
parameter    ap_ST_fsm_state7 = 18'd32;
parameter    ap_ST_fsm_state8 = 18'd64;
parameter    ap_ST_fsm_state9 = 18'd128;
parameter    ap_ST_fsm_state10 = 18'd256;
parameter    ap_ST_fsm_state11 = 18'd512;
parameter    ap_ST_fsm_state12 = 18'd1024;
parameter    ap_ST_fsm_state13 = 18'd2048;
parameter    ap_ST_fsm_state14 = 18'd4096;
parameter    ap_ST_fsm_state15 = 18'd8192;
parameter    ap_ST_fsm_pp1_stage0 = 18'd16384;
parameter    ap_ST_fsm_state24 = 18'd32768;
parameter    ap_ST_fsm_pp2_stage0 = 18'd65536;
parameter    ap_ST_fsm_state27 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg x_ce0;
reg y_out_write;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    y_out_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_reg_691;
reg   [6:0] j_reg_245;
reg   [12:0] indvar_flatten_reg_278;
reg   [6:0] i_2_reg_289;
reg   [6:0] j_2_reg_300;
reg   [6:0] i_3_reg_311;
wire   [31:0] buff_A_q0;
reg   [31:0] reg_334;
wire    ap_CS_fsm_state9;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
wire    ap_block_state19_pp1_stage0_iter3;
wire    ap_block_state20_pp1_stage0_iter4;
wire    ap_block_state21_pp1_stage0_iter5;
wire    ap_block_state22_pp1_stage0_iter6;
wire    ap_block_state23_pp1_stage0_iter7;
wire    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond_flatten_reg_651;
wire   [31:0] grp_fu_330_p2;
reg   [31:0] reg_339;
wire    ap_CS_fsm_state11;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter2_reg;
wire   [31:0] tmp1_q0;
reg   [31:0] reg_344;
wire    ap_CS_fsm_state12;
wire   [6:0] i_4_fu_356_p2;
reg   [6:0] i_4_reg_568;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_362_p1;
reg   [63:0] tmp_reg_573;
wire   [0:0] exitcond6_fu_350_p2;
wire   [13:0] tmp_12_cast_fu_375_p1;
reg   [13:0] tmp_12_cast_reg_585;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_379_p2;
reg   [0:0] exitcond5_reg_590;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] j_3_fu_385_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_18_cast_fu_400_p1;
reg   [63:0] tmp_18_cast_reg_599;
wire   [0:0] exitcond4_fu_405_p2;
wire    ap_CS_fsm_state7;
wire   [6:0] i_5_fu_411_p2;
reg   [6:0] i_5_reg_613;
wire   [13:0] tmp_17_cast_fu_430_p1;
reg   [13:0] tmp_17_cast_reg_618;
reg   [5:0] tmp1_addr_1_reg_623;
wire   [6:0] j_4_fu_440_p2;
reg   [6:0] j_4_reg_631;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond3_fu_434_p2;
wire   [31:0] buff_x_q0;
reg   [31:0] buff_x_load_reg_646;
wire   [0:0] exitcond_flatten_fu_465_p2;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter1_reg;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter3_reg;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter4_reg;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter5_reg;
reg   [0:0] exitcond_flatten_reg_651_pp1_iter6_reg;
wire   [12:0] indvar_flatten_next_fu_471_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [6:0] p_v_fu_497_p3;
reg   [6:0] p_v_reg_660;
reg   [5:0] buff_y_out_addr_2_reg_675;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter1_reg;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter2_reg;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter3_reg;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter4_reg;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter5_reg;
reg   [5:0] buff_y_out_addr_2_reg_675_pp1_iter6_reg;
wire   [6:0] j_5_fu_542_p2;
wire   [31:0] buff_y_out_q0;
reg    ap_enable_reg_pp1_iter4;
wire   [0:0] exitcond_fu_548_p2;
wire    ap_block_state25_pp2_stage0_iter0;
reg    ap_block_state26_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [6:0] i_6_fu_554_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
wire    ap_CS_fsm_state24;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
reg   [11:0] buff_A_address0;
reg    buff_A_ce0;
reg    buff_A_we0;
reg   [5:0] buff_x_address0;
reg    buff_x_ce0;
reg    buff_x_we0;
reg   [5:0] buff_y_out_address0;
reg    buff_y_out_ce0;
reg    buff_y_out_we0;
reg   [5:0] buff_y_out_address1;
reg    buff_y_out_ce1;
reg    buff_y_out_we1;
wire   [31:0] buff_y_out_q1;
reg   [5:0] tmp1_address0;
reg    tmp1_ce0;
reg    tmp1_we0;
reg   [31:0] tmp1_d0;
reg   [6:0] i_reg_233;
wire    ap_CS_fsm_state6;
reg   [6:0] i_1_reg_256;
reg   [6:0] j_1_reg_267;
wire    ap_CS_fsm_state15;
reg   [6:0] ap_phi_mux_i_2_phi_fu_293_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_1_fu_417_p1;
wire   [63:0] tmp_22_cast_fu_460_p1;
wire   [63:0] tmp_7_fu_446_p1;
wire   [63:0] p_mid2_fu_517_p1;
wire   [63:0] tmp_21_cast_fu_537_p1;
wire   [63:0] tmp_2_fu_522_p1;
wire   [63:0] tmp_s_fu_560_p1;
reg    ap_block_pp2_stage0_01001;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] grp_fu_322_p0;
reg   [31:0] grp_fu_330_p1;
wire    ap_CS_fsm_state10;
wire   [12:0] tmp_3_fu_367_p3;
wire   [13:0] tmp_3_cast_fu_391_p1;
wire   [13:0] tmp_13_fu_395_p2;
wire   [12:0] tmp_11_fu_422_p3;
wire   [13:0] tmp_7_cast_fu_451_p1;
wire   [13:0] tmp_18_fu_455_p2;
wire   [0:0] exitcond1_fu_483_p2;
wire   [6:0] i_7_fu_477_p2;
wire   [12:0] tmp_16_fu_505_p3;
wire   [6:0] j_2_mid2_fu_489_p3;
wire   [13:0] tmp_20_cast_fu_513_p1;
wire   [13:0] tmp_2_cast_fu_527_p1;
wire   [13:0] tmp_17_fu_531_p2;
wire    ap_CS_fsm_state27;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
end

atax_buff_A #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
buff_A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_A_address0),
    .ce0(buff_A_ce0),
    .we0(buff_A_we0),
    .d0(A_q0),
    .q0(buff_A_q0)
);

atax_buff_x #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buff_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_x_address0),
    .ce0(buff_x_ce0),
    .we0(buff_x_we0),
    .d0(x_q0),
    .q0(buff_x_q0)
);

atax_buff_y_out #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buff_y_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_y_out_address0),
    .ce0(buff_y_out_ce0),
    .we0(buff_y_out_we0),
    .d0(32'd0),
    .q0(buff_y_out_q0),
    .address1(buff_y_out_address1),
    .ce1(buff_y_out_ce1),
    .we1(buff_y_out_we1),
    .d1(grp_fu_322_p2),
    .q1(buff_y_out_q1)
);

atax_buff_x #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
tmp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp1_address0),
    .ce0(tmp1_ce0),
    .we0(tmp1_we0),
    .d0(tmp1_d0),
    .q0(tmp1_q0)
);

atax_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
atax_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(reg_339),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

atax_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
atax_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_334),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state25))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_350_p2 == 1'd1))) begin
        i_1_reg_256 <= 7'd0;
    end else if (((exitcond3_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_1_reg_256 <= i_5_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
        i_2_reg_289 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_2_reg_289 <= p_v_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_3_reg_311 <= 7'd0;
    end else if (((exitcond_fu_548_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        i_3_reg_311 <= i_6_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_233 <= i_4_reg_568;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_233 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
        indvar_flatten_reg_278 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_465_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_278 <= indvar_flatten_next_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_267 <= j_4_reg_631;
    end else if (((exitcond4_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_267 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
        j_2_reg_300 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_465_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_2_reg_300 <= j_5_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_379_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_245 <= j_3_fu_385_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_245 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buff_x_load_reg_646 <= buff_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_465_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buff_y_out_addr_2_reg_675 <= tmp_2_fu_522_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buff_y_out_addr_2_reg_675_pp1_iter1_reg <= buff_y_out_addr_2_reg_675;
        exitcond_flatten_reg_651 <= exitcond_flatten_fu_465_p2;
        exitcond_flatten_reg_651_pp1_iter1_reg <= exitcond_flatten_reg_651;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        buff_y_out_addr_2_reg_675_pp1_iter2_reg <= buff_y_out_addr_2_reg_675_pp1_iter1_reg;
        buff_y_out_addr_2_reg_675_pp1_iter3_reg <= buff_y_out_addr_2_reg_675_pp1_iter2_reg;
        buff_y_out_addr_2_reg_675_pp1_iter4_reg <= buff_y_out_addr_2_reg_675_pp1_iter3_reg;
        buff_y_out_addr_2_reg_675_pp1_iter5_reg <= buff_y_out_addr_2_reg_675_pp1_iter4_reg;
        buff_y_out_addr_2_reg_675_pp1_iter6_reg <= buff_y_out_addr_2_reg_675_pp1_iter5_reg;
        exitcond_flatten_reg_651_pp1_iter2_reg <= exitcond_flatten_reg_651_pp1_iter1_reg;
        exitcond_flatten_reg_651_pp1_iter3_reg <= exitcond_flatten_reg_651_pp1_iter2_reg;
        exitcond_flatten_reg_651_pp1_iter4_reg <= exitcond_flatten_reg_651_pp1_iter3_reg;
        exitcond_flatten_reg_651_pp1_iter5_reg <= exitcond_flatten_reg_651_pp1_iter4_reg;
        exitcond_flatten_reg_651_pp1_iter6_reg <= exitcond_flatten_reg_651_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond5_reg_590 <= exitcond5_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond_reg_691 <= exitcond_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_568 <= i_4_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_613 <= i_5_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_631 <= j_4_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_fu_465_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_v_reg_660 <= p_v_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        reg_334 <= buff_A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_651_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        reg_339 <= grp_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_651 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        reg_344 <= tmp1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp1_addr_1_reg_623 <= tmp_1_fu_417_p1;
        tmp_17_cast_reg_618[12 : 6] <= tmp_17_cast_fu_430_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_12_cast_reg_585[12 : 6] <= tmp_12_cast_fu_375_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_cast_reg_599[13 : 0] <= tmp_18_cast_fu_400_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_573[6 : 0] <= tmp_fu_362_p1[6 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_379_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_465_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_548_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_651 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_2_phi_fu_293_p4 = p_v_reg_660;
    end else begin
        ap_phi_mux_i_2_phi_fu_293_p4 = i_2_reg_289;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buff_A_address0 = tmp_21_cast_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_A_address0 = tmp_22_cast_fu_460_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_A_address0 = tmp_18_cast_reg_599;
    end else begin
        buff_A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buff_A_ce0 = 1'b1;
    end else begin
        buff_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_reg_590 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buff_A_we0 = 1'b1;
    end else begin
        buff_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_x_address0 = tmp_7_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_x_address0 = tmp_reg_573;
    end else begin
        buff_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        buff_x_ce0 = 1'b1;
    end else begin
        buff_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_x_we0 = 1'b1;
    end else begin
        buff_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        buff_y_out_address0 = buff_y_out_addr_2_reg_675_pp1_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_y_out_address0 = tmp_reg_573;
    end else begin
        buff_y_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        buff_y_out_address1 = tmp_s_fu_560_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        buff_y_out_address1 = buff_y_out_addr_2_reg_675_pp1_iter6_reg;
    end else begin
        buff_y_out_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        buff_y_out_ce0 = 1'b1;
    end else begin
        buff_y_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        buff_y_out_ce1 = 1'b1;
    end else begin
        buff_y_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_y_out_we0 = 1'b1;
    end else begin
        buff_y_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_651_pp1_iter6_reg == 1'd0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        buff_y_out_we1 = 1'b1;
    end else begin
        buff_y_out_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_fu_322_p0 = buff_y_out_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_322_p0 = tmp1_q0;
    end else begin
        grp_fu_322_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_330_p1 = reg_344;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_330_p1 = buff_x_load_reg_646;
    end else begin
        grp_fu_330_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp1_address0 = p_mid2_fu_517_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        tmp1_address0 = tmp1_addr_1_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp1_address0 = tmp_reg_573;
    end else begin
        tmp1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        tmp1_ce0 = 1'b1;
    end else begin
        tmp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp1_d0 = grp_fu_322_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp1_d0 = 32'd0;
    end else begin
        tmp1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_we0 = 1'b1;
    end else begin
        tmp1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_691 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_691 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond3_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_465_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_465_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_fu_548_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_fu_548_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_18_cast_fu_400_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((exitcond_reg_691 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((exitcond_reg_691 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((exitcond_reg_691 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp2_stage0_iter1 = ((exitcond_reg_691 == 1'd0) & (y_out_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign exitcond1_fu_483_p2 = ((j_2_reg_300 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_434_p2 = ((j_1_reg_267 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond4_fu_405_p2 = ((i_1_reg_256 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond5_fu_379_p2 = ((j_reg_245 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond6_fu_350_p2 = ((i_reg_233 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_465_p2 = ((indvar_flatten_reg_278 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_548_p2 = ((i_3_reg_311 == 7'd64) ? 1'b1 : 1'b0);

assign i_4_fu_356_p2 = (i_reg_233 + 7'd1);

assign i_5_fu_411_p2 = (i_1_reg_256 + 7'd1);

assign i_6_fu_554_p2 = (i_3_reg_311 + 7'd1);

assign i_7_fu_477_p2 = (ap_phi_mux_i_2_phi_fu_293_p4 + 7'd1);

assign indvar_flatten_next_fu_471_p2 = (indvar_flatten_reg_278 + 13'd1);

assign j_2_mid2_fu_489_p3 = ((exitcond1_fu_483_p2[0:0] === 1'b1) ? 7'd0 : j_2_reg_300);

assign j_3_fu_385_p2 = (j_reg_245 + 7'd1);

assign j_4_fu_440_p2 = (j_1_reg_267 + 7'd1);

assign j_5_fu_542_p2 = (j_2_mid2_fu_489_p3 + 7'd1);

assign p_mid2_fu_517_p1 = p_v_fu_497_p3;

assign p_v_fu_497_p3 = ((exitcond1_fu_483_p2[0:0] === 1'b1) ? i_7_fu_477_p2 : ap_phi_mux_i_2_phi_fu_293_p4);

assign tmp_11_fu_422_p3 = {{i_1_reg_256}, {6'd0}};

assign tmp_12_cast_fu_375_p1 = tmp_3_fu_367_p3;

assign tmp_13_fu_395_p2 = (tmp_12_cast_reg_585 + tmp_3_cast_fu_391_p1);

assign tmp_16_fu_505_p3 = {{p_v_fu_497_p3}, {6'd0}};

assign tmp_17_cast_fu_430_p1 = tmp_11_fu_422_p3;

assign tmp_17_fu_531_p2 = (tmp_20_cast_fu_513_p1 + tmp_2_cast_fu_527_p1);

assign tmp_18_cast_fu_400_p1 = tmp_13_fu_395_p2;

assign tmp_18_fu_455_p2 = (tmp_17_cast_reg_618 + tmp_7_cast_fu_451_p1);

assign tmp_1_fu_417_p1 = i_1_reg_256;

assign tmp_20_cast_fu_513_p1 = tmp_16_fu_505_p3;

assign tmp_21_cast_fu_537_p1 = tmp_17_fu_531_p2;

assign tmp_22_cast_fu_460_p1 = tmp_18_fu_455_p2;

assign tmp_2_cast_fu_527_p1 = j_2_mid2_fu_489_p3;

assign tmp_2_fu_522_p1 = j_2_mid2_fu_489_p3;

assign tmp_3_cast_fu_391_p1 = j_reg_245;

assign tmp_3_fu_367_p3 = {{i_reg_233}, {6'd0}};

assign tmp_7_cast_fu_451_p1 = j_1_reg_267;

assign tmp_7_fu_446_p1 = j_1_reg_267;

assign tmp_fu_362_p1 = i_reg_233;

assign tmp_s_fu_560_p1 = i_3_reg_311;

assign x_address0 = tmp_fu_362_p1;

assign y_out_din = buff_y_out_q1;

always @ (posedge ap_clk) begin
    tmp_reg_573[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_12_cast_reg_585[5:0] <= 6'b000000;
    tmp_12_cast_reg_585[13] <= 1'b0;
    tmp_18_cast_reg_599[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    tmp_17_cast_reg_618[5:0] <= 6'b000000;
    tmp_17_cast_reg_618[13] <= 1'b0;
end

endmodule //atax

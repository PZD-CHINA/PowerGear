// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="atax,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.419200,HLS_SYN_LAT=70277,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=5,HLS_SYN_FF=653,HLS_SYN_LUT=971,HLS_VERSION=2018_2}" *)

module atax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        x_address0,
        x_ce0,
        x_q0,
        y_out_din,
        y_out_full_n,
        y_out_write
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_pp0_stage0 = 26'd8;
parameter    ap_ST_fsm_state6 = 26'd16;
parameter    ap_ST_fsm_state7 = 26'd32;
parameter    ap_ST_fsm_state8 = 26'd64;
parameter    ap_ST_fsm_state9 = 26'd128;
parameter    ap_ST_fsm_state10 = 26'd256;
parameter    ap_ST_fsm_state11 = 26'd512;
parameter    ap_ST_fsm_state12 = 26'd1024;
parameter    ap_ST_fsm_state13 = 26'd2048;
parameter    ap_ST_fsm_state14 = 26'd4096;
parameter    ap_ST_fsm_state15 = 26'd8192;
parameter    ap_ST_fsm_state16 = 26'd16384;
parameter    ap_ST_fsm_state17 = 26'd32768;
parameter    ap_ST_fsm_state18 = 26'd65536;
parameter    ap_ST_fsm_state19 = 26'd131072;
parameter    ap_ST_fsm_state20 = 26'd262144;
parameter    ap_ST_fsm_state21 = 26'd524288;
parameter    ap_ST_fsm_state22 = 26'd1048576;
parameter    ap_ST_fsm_state23 = 26'd2097152;
parameter    ap_ST_fsm_state24 = 26'd4194304;
parameter    ap_ST_fsm_state25 = 26'd8388608;
parameter    ap_ST_fsm_pp1_stage0 = 26'd16777216;
parameter    ap_ST_fsm_state28 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg x_ce0;
reg y_out_write;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    y_out_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_647;
reg   [6:0] j_reg_233;
reg   [6:0] i_3_reg_289;
wire   [31:0] buff_A_q0;
reg   [31:0] reg_312;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] reg_317;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state21;
wire   [31:0] tmp1_q0;
reg   [31:0] reg_322;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire   [6:0] i_4_fu_334_p2;
reg   [6:0] i_4_reg_523;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_340_p1;
reg   [63:0] tmp_reg_528;
wire   [0:0] exitcond6_fu_328_p2;
wire   [13:0] tmp_16_cast_fu_353_p1;
reg   [13:0] tmp_16_cast_reg_540;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_357_p2;
reg   [0:0] exitcond5_reg_545;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] j_3_fu_363_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_19_cast_fu_378_p1;
reg   [63:0] tmp_19_cast_reg_554;
wire   [6:0] i_5_fu_389_p2;
reg   [6:0] i_5_reg_567;
wire    ap_CS_fsm_state7;
wire   [13:0] tmp_18_cast_fu_408_p1;
reg   [13:0] tmp_18_cast_reg_572;
wire   [0:0] exitcond4_fu_383_p2;
reg   [5:0] tmp1_addr_1_reg_577;
wire   [6:0] j_4_fu_418_p2;
reg   [6:0] j_4_reg_585;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond3_fu_412_p2;
wire   [31:0] buff_x_q0;
reg   [31:0] buff_x_load_reg_600;
wire   [0:0] exitcond2_fu_443_p2;
wire    ap_CS_fsm_state16;
wire   [6:0] i_7_fu_449_p2;
reg   [6:0] i_7_reg_609;
wire   [13:0] tmp_21_cast_fu_468_p1;
reg   [13:0] tmp_21_cast_reg_619;
wire   [6:0] j_5_fu_478_p2;
reg   [6:0] j_5_reg_627;
wire    ap_CS_fsm_state18;
wire   [0:0] exitcond1_fu_472_p2;
reg   [5:0] buff_y_out_addr_2_reg_637;
wire   [31:0] buff_y_out_q0;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond_fu_503_p2;
wire    ap_block_state26_pp1_stage0_iter0;
reg    ap_block_state27_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [6:0] i_6_fu_509_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg   [11:0] buff_A_address0;
reg    buff_A_ce0;
reg    buff_A_we0;
reg   [5:0] buff_x_address0;
reg    buff_x_ce0;
reg    buff_x_we0;
reg   [5:0] buff_y_out_address0;
reg    buff_y_out_ce0;
reg    buff_y_out_we0;
reg   [31:0] buff_y_out_d0;
reg   [5:0] tmp1_address0;
reg    tmp1_ce0;
reg    tmp1_we0;
reg   [31:0] tmp1_d0;
reg   [6:0] i_reg_221;
wire    ap_CS_fsm_state6;
reg   [6:0] i_1_reg_244;
reg   [6:0] j_1_reg_255;
wire    ap_CS_fsm_state15;
reg   [6:0] i_2_reg_266;
reg   [6:0] j_2_reg_278;
wire    ap_CS_fsm_state25;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_1_fu_395_p1;
wire   [63:0] tmp_22_cast_fu_438_p1;
wire   [63:0] tmp_7_fu_424_p1;
wire   [63:0] tmp_5_fu_455_p1;
wire   [63:0] tmp_23_cast_fu_498_p1;
wire   [63:0] tmp_2_fu_484_p1;
wire   [63:0] tmp_s_fu_515_p1;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] grp_fu_300_p0;
reg   [31:0] grp_fu_308_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state20;
wire   [12:0] tmp_10_fu_345_p3;
wire   [13:0] tmp_3_cast_fu_369_p1;
wire   [13:0] tmp_16_fu_373_p2;
wire   [12:0] tmp_15_fu_400_p3;
wire   [13:0] tmp_7_cast_fu_429_p1;
wire   [13:0] tmp_18_fu_433_p2;
wire   [12:0] tmp_17_fu_460_p3;
wire   [13:0] tmp_2_cast_fu_489_p1;
wire   [13:0] tmp_19_fu_493_p2;
wire    ap_CS_fsm_state28;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

atax_buff_A #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
buff_A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_A_address0),
    .ce0(buff_A_ce0),
    .we0(buff_A_we0),
    .d0(A_q0),
    .q0(buff_A_q0)
);

atax_buff_x #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buff_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_x_address0),
    .ce0(buff_x_ce0),
    .we0(buff_x_we0),
    .d0(x_q0),
    .q0(buff_x_q0)
);

atax_buff_x #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buff_y_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_y_out_address0),
    .ce0(buff_y_out_ce0),
    .we0(buff_y_out_we0),
    .d0(buff_y_out_d0),
    .q0(buff_y_out_q0)
);

atax_buff_x #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
tmp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp1_address0),
    .ce0(tmp1_ce0),
    .we0(tmp1_we0),
    .d0(tmp1_d0),
    .q0(tmp1_q0)
);

atax_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
atax_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_300_p0),
    .din1(reg_317),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

atax_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
atax_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_312),
    .din1(grp_fu_308_p1),
    .ce(1'b1),
    .dout(grp_fu_308_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state26))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond2_fu_443_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond2_fu_443_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_328_p2 == 1'd1))) begin
        i_1_reg_244 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_412_p2 == 1'd1))) begin
        i_1_reg_244 <= i_5_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_383_p2 == 1'd1))) begin
        i_2_reg_266 <= 7'd0;
    end else if (((exitcond1_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_2_reg_266 <= i_7_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond2_fu_443_p2 == 1'd1))) begin
        i_3_reg_289 <= 7'd0;
    end else if (((exitcond_fu_503_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_3_reg_289 <= i_6_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_221 <= i_4_reg_523;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_221 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_255 <= j_4_reg_585;
    end else if (((exitcond4_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_255 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_2_reg_278 <= j_5_reg_627;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_2_reg_278 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_357_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_233 <= j_3_fu_363_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_233 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buff_x_load_reg_600 <= buff_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        buff_y_out_addr_2_reg_637 <= tmp_2_fu_484_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond5_reg_545 <= exitcond5_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_647 <= exitcond_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_523 <= i_4_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_567 <= i_5_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_7_reg_609 <= i_7_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_585 <= j_4_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_5_reg_627 <= j_5_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_312 <= buff_A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_317 <= grp_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_322 <= tmp1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp1_addr_1_reg_577 <= tmp_1_fu_395_p1;
        tmp_18_cast_reg_572[12 : 6] <= tmp_18_cast_fu_408_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_16_cast_reg_540[12 : 6] <= tmp_16_cast_fu_353_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_19_cast_reg_554[13 : 0] <= tmp_19_cast_fu_378_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_21_cast_reg_619[12 : 6] <= tmp_21_cast_fu_468_p1[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_528[6 : 0] <= tmp_fu_340_p1[6 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_357_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_503_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buff_A_address0 = tmp_23_cast_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_A_address0 = tmp_22_cast_fu_438_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_A_address0 = tmp_19_cast_reg_554;
    end else begin
        buff_A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buff_A_ce0 = 1'b1;
    end else begin
        buff_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_reg_545 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buff_A_we0 = 1'b1;
    end else begin
        buff_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buff_x_address0 = tmp_7_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_x_address0 = tmp_reg_528;
    end else begin
        buff_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        buff_x_ce0 = 1'b1;
    end else begin
        buff_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_x_we0 = 1'b1;
    end else begin
        buff_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        buff_y_out_address0 = tmp_s_fu_515_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21))) begin
        buff_y_out_address0 = buff_y_out_addr_2_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_y_out_address0 = tmp_reg_528;
    end else begin
        buff_y_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state21) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        buff_y_out_ce0 = 1'b1;
    end else begin
        buff_y_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        buff_y_out_d0 = grp_fu_300_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buff_y_out_d0 = 32'd0;
    end else begin
        buff_y_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3))) begin
        buff_y_out_we0 = 1'b1;
    end else begin
        buff_y_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_300_p0 = buff_y_out_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_300_p0 = tmp1_q0;
    end else begin
        grp_fu_300_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_308_p1 = reg_322;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_308_p1 = buff_x_load_reg_600;
    end else begin
        grp_fu_308_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp1_address0 = tmp_5_fu_455_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        tmp1_address0 = tmp1_addr_1_reg_577;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp1_address0 = tmp_reg_528;
    end else begin
        tmp1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        tmp1_ce0 = 1'b1;
    end else begin
        tmp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp1_d0 = grp_fu_300_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp1_d0 = 32'd0;
    end else begin
        tmp1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_we0 = 1'b1;
    end else begin
        tmp1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_647 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_647 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5_fu_357_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond5_fu_357_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_383_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_412_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (exitcond2_fu_443_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((exitcond1_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_503_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_503_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_19_cast_fu_378_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((exitcond_reg_647 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond_reg_647 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond_reg_647 == 1'd0) & (y_out_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp1_stage0_iter1 = ((exitcond_reg_647 == 1'd0) & (y_out_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond1_fu_472_p2 = ((j_2_reg_278 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond2_fu_443_p2 = ((i_2_reg_266 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_412_p2 = ((j_1_reg_255 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond4_fu_383_p2 = ((i_1_reg_244 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond5_fu_357_p2 = ((j_reg_233 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond6_fu_328_p2 = ((i_reg_221 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_503_p2 = ((i_3_reg_289 == 7'd64) ? 1'b1 : 1'b0);

assign i_4_fu_334_p2 = (i_reg_221 + 7'd1);

assign i_5_fu_389_p2 = (i_1_reg_244 + 7'd1);

assign i_6_fu_509_p2 = (i_3_reg_289 + 7'd1);

assign i_7_fu_449_p2 = (i_2_reg_266 + 7'd1);

assign j_3_fu_363_p2 = (j_reg_233 + 7'd1);

assign j_4_fu_418_p2 = (j_1_reg_255 + 7'd1);

assign j_5_fu_478_p2 = (j_2_reg_278 + 7'd1);

assign tmp_10_fu_345_p3 = {{i_reg_221}, {6'd0}};

assign tmp_15_fu_400_p3 = {{i_1_reg_244}, {6'd0}};

assign tmp_16_cast_fu_353_p1 = tmp_10_fu_345_p3;

assign tmp_16_fu_373_p2 = (tmp_16_cast_reg_540 + tmp_3_cast_fu_369_p1);

assign tmp_17_fu_460_p3 = {{i_2_reg_266}, {6'd0}};

assign tmp_18_cast_fu_408_p1 = tmp_15_fu_400_p3;

assign tmp_18_fu_433_p2 = (tmp_18_cast_reg_572 + tmp_7_cast_fu_429_p1);

assign tmp_19_cast_fu_378_p1 = tmp_16_fu_373_p2;

assign tmp_19_fu_493_p2 = (tmp_21_cast_reg_619 + tmp_2_cast_fu_489_p1);

assign tmp_1_fu_395_p1 = i_1_reg_244;

assign tmp_21_cast_fu_468_p1 = tmp_17_fu_460_p3;

assign tmp_22_cast_fu_438_p1 = tmp_18_fu_433_p2;

assign tmp_23_cast_fu_498_p1 = tmp_19_fu_493_p2;

assign tmp_2_cast_fu_489_p1 = j_2_reg_278;

assign tmp_2_fu_484_p1 = j_2_reg_278;

assign tmp_3_cast_fu_369_p1 = j_reg_233;

assign tmp_5_fu_455_p1 = i_2_reg_266;

assign tmp_7_cast_fu_429_p1 = j_1_reg_255;

assign tmp_7_fu_424_p1 = j_1_reg_255;

assign tmp_fu_340_p1 = i_reg_221;

assign tmp_s_fu_515_p1 = i_3_reg_289;

assign x_address0 = tmp_fu_340_p1;

assign y_out_din = buff_y_out_q0;

always @ (posedge ap_clk) begin
    tmp_reg_528[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_16_cast_reg_540[5:0] <= 6'b000000;
    tmp_16_cast_reg_540[13] <= 1'b0;
    tmp_19_cast_reg_554[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    tmp_18_cast_reg_572[5:0] <= 6'b000000;
    tmp_18_cast_reg_572[13] <= 1'b0;
    tmp_21_cast_reg_619[5:0] <= 6'b000000;
    tmp_21_cast_reg_619[13] <= 1'b0;
end

endmodule //atax
